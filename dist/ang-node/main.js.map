{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/Login/login.component.css","webpack:///./src/app/Login/login.component.html","webpack:///./src/app/Login/login.component.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/posts.service.ts","webpack:///./src/app/posts/posts.component.css","webpack:///./src/app/posts/posts.component.html","webpack:///./src/app/posts/posts.component.ts","webpack:///./src/app/services/header.service.ts","webpack:///./src/app/services/login.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"/* Bordered form */\\r\\nform {\\r\\n    border: 3px solid #f1f1f1;\\r\\n  }\\r\\n/* Full-width inputs */\\r\\ninput[type=text], input[type=password] {\\r\\n    width: 100%;\\r\\n    padding: 12px 20px;\\r\\n    margin: 8px 0;\\r\\n    display: inline-block;\\r\\n    border: 1px solid #ccc;\\r\\n    box-sizing: border-box;\\r\\n  }\\r\\n/* Set a style for all buttons */\\r\\nbutton {\\r\\n    background-color: #4CAF50;\\r\\n    color: white;\\r\\n    padding: 14px 20px;\\r\\n    margin: 8px 0;\\r\\n    border: none;\\r\\n    cursor: pointer;\\r\\n    width: 100%;\\r\\n  }\\r\\n/* Add a hover effect for buttons */\\r\\nbutton:hover {\\r\\n    opacity: 0.8;\\r\\n  }\\r\\n/* Extra style for the cancel button (red) */\\r\\n.cancelbtn {\\r\\n    width: auto;\\r\\n    padding: 10px 18px;\\r\\n    background-color: #f44336;\\r\\n  }\\r\\n/* Center the avatar image inside this container */\\r\\n.imgcontainer {\\r\\n    text-align: center;\\r\\n    margin: 24px 0 12px 0;\\r\\n  }\\r\\n/* Avatar image */\\r\\nimg.avatar {\\r\\n    width: 10%;\\r\\n    border-radius: 13%;\\r\\n  }\\r\\n/* Add padding to containers */\\r\\n.container {\\r\\n    padding: 16px;\\r\\n  }\\r\\n/* The \\\"Forgot password\\\" text */\\r\\nspan.psw {\\r\\n    float: right;\\r\\n    padding-top: 16px;\\r\\n  }\\r\\n/* Change styles for span and cancel button on extra small screens */\\r\\n@media screen and (max-width: 300px) {\\r\\n    span.psw {\\r\\n      display: block;\\r\\n      float: none;\\r\\n    }\\r\\n    .cancelbtn {\\r\\n      width: 100%;\\r\\n    }\\r\\n  }\"","module.exports = \"<div class=\\\"containe\\\">\\n<form #userForm=\\\"ngForm\\\" (ngSubmit)=\\\"submit(userForm.value)\\\">\\n  <div class=\\\"imgcontainer\\\">\\n    <img src=\\\"/assets/images/MantraLogo.jpg\\\" alt=\\\"Avatar\\\" class=\\\"avatar\\\">\\n  </div>\\n   <div class=\\\"form-group\\\">\\n    <label><b>Username</b></label>\\n    <input type=\\\"text\\\" placeholder=\\\"Enter Username\\\"  class=\\\"form-control\\\" name=\\\"userName\\\" ngModel>\\n   </div>\\n   <div class=\\\"form-group\\\">\\n    <label><b>Password</b></label>\\n    <input type=\\\"password\\\" placeholder=\\\"Enter password\\\"  class=\\\"form-control\\\" name=\\\"password\\\" ngModel>\\n   </div>\\n   <button type=\\\"submit\\\">Login</button>\\n  <!-- <div class=\\\"container\\\">\\n    <label for=\\\"uname\\\"><b>Username</b></label>\\n    <input type=\\\"text\\\" placeholder=\\\"Enter Username\\\" [formGroup]=\\\"form\\\" formControlName=\\\"userName\\\" name=\\\"uname\\\" required>\\n\\n    <label for=\\\"psw\\\"><b>Password</b></label>\\n    <input type=\\\"password\\\" [(ngModel)]=\\\"Formdata.pass\\\" placeholder=\\\"Enter Password\\\" formControlName=\\\"password\\\" name=\\\"psw\\\" required>\\n\\n    <button type=\\\"submit\\\" (click)=\\\"\\\">Login</button>\\n   <label>\\n      <input type=\\\"checkbox\\\" [(ngModel)]=\\\"Formdata.rememberMe\\\" checked=\\\"checked\\\" formControlName=\\\"rememberMe\\\" name=\\\"remember\\\"> Remember me\\n    </label> \\n  </div> -->\\n\\n  <div class=\\\"container\\\" style=\\\"background-color:#f1f1f1\\\">\\n    <button type=\\\"button\\\" class=\\\"cancelbtn\\\">Cancel</button>\\n    <span class=\\\"psw\\\">Forgot <a href=\\\"#\\\">password?</a></span>\\n  </div>\\n</form>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators, NgForm } from '@angular/forms';\nimport {LoginService} from '../services/login.service';\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n   userName;\n   passWord;\n   constructor(\n     private _LoginService : LoginService\n    ){ }\n   ngOnInit() {}\n  submit(value :any){\n    this.userName=value.userName;\n    this.passWord=value.password;\n    console.log(\"this.userName\"+this.userName);\n    console.log(\"this.passWord\"+this.passWord);\n    //prepaire body\n    let body = {\n      username:  this.userName,\n      password:  this.passWord\n    };\n    //calling login servces mathode\n    console.log(\"data body\"+body);\n    \n    this._LoginService.login(body).subscribe(data=>{\n      // this.router.navigate(['/dashboard']);\n    },\n    error =>{\n      console.log(error);\n    }\n  )\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<router-outlet></router-outlet>\\n\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'app';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { LoginComponent } from './Login/login.component';\nimport { AppComponent } from './app.component';\nimport { PostsComponent } from './posts/posts.component';\nimport { RouterModule, Routes } from '@angular/router';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\n//https://www.youtube.com/watch?v=MNKVqYMS6E4\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    PostsComponent,\n    LoginComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    FormsModule,\n    RouterModule.forRoot([\n       {\n        path:'',\n        redirectTo: 'login',\n        pathMatch: 'full'\n       },\n       {\n         path:'login',component:LoginComponent\n       },\n      // {\n      //   path:'posts',component:PostsComponent\n      // {\n      //        path:'',\n      //        redirectTo: 'posts',\n      //        pathMatch: 'full'\n      //      },\n      //      {\n      //        path:'posts',component:PostsComponent\n      //      }\n      // }\n    ])\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\n@Injectable({\n  providedIn: 'root'\n})\nexport class PostsService {\n\n  constructor(private http : HttpClient) { }\n  getAllPosts(){\n    // return this.http.get('/posts').map((posts)=>{\n    //   return posts;\n    // })\n    return   this.http.get('/routes/get/').pipe(map(posts => {\n      return posts;  \n    }))\n     \n  }\n}\n","module.exports = \"\"","module.exports = \"<button class=\\\"btn btn-primary\\\">click</button>\\n<table class=\\\"table\\\">\\n    <thead>\\n      <tr>\\n        <th scope=\\\"col\\\">User Id</th>\\n        <th scope=\\\"col\\\">Name</th>\\n        <th scope=\\\"col\\\">EmpCode</th>\\n        <th scope=\\\"col\\\">Selary</th>\\n      </tr>\\n    </thead>\\n    <tbody>\\n      <tr *ngFor=\\\"let post of posts\\\">\\n        <td>{{post. empID}}</td>\\n        <td>{{post.name}}</td>\\n        <td>{{post.empCode}}</td>\\n        <td>{{post.Selary}}</td>\\n      </tr>\\n    </tbody>\\n  </table>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { PostsService} from '../posts.service'\n\n@Component({\n  selector: 'app-posts',\n  templateUrl: './posts.component.html',\n  styleUrls: ['./posts.component.css']\n})\nexport class PostsComponent implements OnInit {\n  \n     posts : any =[];\n  constructor(private postService :PostsService) {\n    console.log(\"constructor is running\");\n   }\n\n  ngOnInit() {\n    this.postService.getAllPosts().subscribe(posts =>{\n        this.posts = posts\n        console.log(\"data\"+this.posts);\n        \n    })\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Http, Response, Headers,RequestOptions,HttpModule} from '@angular/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HeaderService {\n\n  constructor() { }\n  config_Header(body) {\n    const basicToken = 'basic ' + btoa(body.username + ':' + body.password);\n    let headers = new Headers();\n    headers.append('Content-Type', 'application/json; charset=utf-8');\n    headers.append('accept', 'application/json');\n    headers.append('access-control-allow-origin', '*');\n    headers.append('Authorization', basicToken);\n    let options = new RequestOptions({ headers: headers });\n    return options;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient,HttpHeaders } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\nimport { Headers} from '@angular/http';\nimport {HeaderService}  from \"./header.service\"\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n\n  constructor(private http : HttpClient,private _HeaderService : HeaderService) { }\n  login(body){\n    console.log(body)\n    // const header =this._HeaderService.config_Header(body);\n    const headers = new HttpHeaders().set(\"X-CustomHttpHeader\", \"CUSTOM_VALUE\");\n    return   this.http.post('/routes/login/',body,{headers}).pipe(map(getData => {\n      return getData;  \n    }))\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}